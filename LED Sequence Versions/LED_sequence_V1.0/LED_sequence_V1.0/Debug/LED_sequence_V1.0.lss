
LED_sequence_V1.0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004ca  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000053e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800060  00800060  0000053e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000053e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000570  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000148  00000000  00000000  000005ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000fc7  00000000  00000000  000006f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000898  00000000  00000000  000016bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000092e  00000000  00000000  00001f53  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001e8  00000000  00000000  00002884  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004c2  00000000  00000000  00002a6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000560  00000000  00000000  00002f2e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d8  00000000  00000000  0000348e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 32 00 	jmp	0x64	; 0x64 <__ctors_end>
   4:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
   8:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
   c:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  10:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  14:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  18:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  1c:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  20:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  24:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  28:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  2c:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  30:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  34:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  38:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  3c:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  40:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  44:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  48:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  4c:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  50:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  54:	85 00       	.word	0x0085	; ????
  56:	96 00       	.word	0x0096	; ????
  58:	9b 00       	.word	0x009b	; ????
  5a:	a0 00       	.word	0x00a0	; ????
  5c:	a5 00       	.word	0x00a5	; ????
  5e:	aa 00       	.word	0x00aa	; ????
  60:	af 00       	.word	0x00af	; ????
  62:	b4 00       	.word	0x00b4	; ????

00000064 <__ctors_end>:
  64:	11 24       	eor	r1, r1
  66:	1f be       	out	0x3f, r1	; 63
  68:	cf e5       	ldi	r28, 0x5F	; 95
  6a:	d8 e0       	ldi	r29, 0x08	; 8
  6c:	de bf       	out	0x3e, r29	; 62
  6e:	cd bf       	out	0x3d, r28	; 61

00000070 <__do_clear_bss>:
  70:	20 e0       	ldi	r18, 0x00	; 0
  72:	a0 e6       	ldi	r26, 0x60	; 96
  74:	b0 e0       	ldi	r27, 0x00	; 0
  76:	01 c0       	rjmp	.+2      	; 0x7a <.do_clear_bss_start>

00000078 <.do_clear_bss_loop>:
  78:	1d 92       	st	X+, r1

0000007a <.do_clear_bss_start>:
  7a:	a2 36       	cpi	r26, 0x62	; 98
  7c:	b2 07       	cpc	r27, r18
  7e:	e1 f7       	brne	.-8      	; 0x78 <.do_clear_bss_loop>
  80:	0e 94 cc 00 	call	0x198	; 0x198 <main>
  84:	0c 94 63 02 	jmp	0x4c6	; 0x4c6 <_exit>

00000088 <__bad_interrupt>:
  88:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000008c <APP_init>:

#include "application.h"

void APP_init(void)
{
		LED_init(LED0_PORT,LED0_PIN);
  8c:	60 e0       	ldi	r22, 0x00	; 0
  8e:	81 e4       	ldi	r24, 0x41	; 65
  90:	0e 94 c0 00 	call	0x180	; 0x180 <LED_init>
		LED_init(LED1_PORT,LED1_PIN);
  94:	61 e0       	ldi	r22, 0x01	; 1
  96:	81 e4       	ldi	r24, 0x41	; 65
  98:	0e 94 c0 00 	call	0x180	; 0x180 <LED_init>
		LED_init(LED2_PORT,LED2_PIN);
  9c:	62 e0       	ldi	r22, 0x02	; 2
  9e:	81 e4       	ldi	r24, 0x41	; 65
  a0:	0e 94 c0 00 	call	0x180	; 0x180 <LED_init>
		LED_init(LED3_PORT,LED3_PIN);
  a4:	63 e0       	ldi	r22, 0x03	; 3
  a6:	81 e4       	ldi	r24, 0x41	; 65
  a8:	0e 94 c0 00 	call	0x180	; 0x180 <LED_init>
		BUTTON_init (BUTTON0_PORT, BUTTON0_PIN);	
  ac:	66 e0       	ldi	r22, 0x06	; 6
  ae:	84 e4       	ldi	r24, 0x44	; 68
  b0:	0e 94 b9 00 	call	0x172	; 0x172 <BUTTON_init>
  b4:	08 95       	ret

000000b6 <APP_start>:
	
}
void APP_start(){
	
		
		BUTTON_read (BUTTON0_PORT, BUTTON0_PIN, &Check);
  b6:	41 e6       	ldi	r20, 0x61	; 97
  b8:	50 e0       	ldi	r21, 0x00	; 0
  ba:	66 e0       	ldi	r22, 0x06	; 6
  bc:	84 e4       	ldi	r24, 0x44	; 68
  be:	0e 94 bd 00 	call	0x17a	; 0x17a <BUTTON_read>
		
		static uint8_t Counter = 0;
		while (Check==0){
  c2:	06 c0       	rjmp	.+12     	; 0xd0 <APP_start+0x1a>
		BUTTON_read (BUTTON0_PORT, BUTTON0_PIN, &Check);	
  c4:	41 e6       	ldi	r20, 0x61	; 97
  c6:	50 e0       	ldi	r21, 0x00	; 0
  c8:	66 e0       	ldi	r22, 0x06	; 6
  ca:	84 e4       	ldi	r24, 0x44	; 68
  cc:	0e 94 bd 00 	call	0x17a	; 0x17a <BUTTON_read>
	
		
		BUTTON_read (BUTTON0_PORT, BUTTON0_PIN, &Check);
		
		static uint8_t Counter = 0;
		while (Check==0){
  d0:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <Check>
  d4:	88 23       	and	r24, r24
  d6:	b1 f3       	breq	.-20     	; 0xc4 <APP_start+0xe>
		BUTTON_read (BUTTON0_PORT, BUTTON0_PIN, &Check);	
		}
		Delay(400);   //wait for user input 400milliseconds
  d8:	80 e9       	ldi	r24, 0x90	; 144
  da:	91 e0       	ldi	r25, 0x01	; 1
  dc:	0e 94 32 02 	call	0x464	; 0x464 <Delay>
		(Counter)++;
  e0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  e4:	8f 5f       	subi	r24, 0xFF	; 255
  e6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
		if (Counter==8){
  ea:	88 30       	cpi	r24, 0x08	; 8
  ec:	11 f4       	brne	.+4      	; 0xf2 <APP_start+0x3c>
			Counter = 0;
  ee:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
		}
		switch(Counter)
  f2:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  f6:	8e 2f       	mov	r24, r30
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	88 30       	cpi	r24, 0x08	; 8
  fc:	91 05       	cpc	r25, r1
  fe:	c0 f5       	brcc	.+112    	; 0x170 <APP_start+0xba>
 100:	fc 01       	movw	r30, r24
 102:	e6 5d       	subi	r30, 0xD6	; 214
 104:	ff 4f       	sbci	r31, 0xFF	; 255
 106:	0c 94 5d 02 	jmp	0x4ba	; 0x4ba <__tablejump2__>
		{
			case 0:
			LED_off(LED0_PORT,LED0_PIN);
 10a:	60 e0       	ldi	r22, 0x00	; 0
 10c:	81 e4       	ldi	r24, 0x41	; 65
 10e:	0e 94 c8 00 	call	0x190	; 0x190 <LED_off>
			LED_off(LED1_PORT,LED1_PIN);
 112:	61 e0       	ldi	r22, 0x01	; 1
 114:	81 e4       	ldi	r24, 0x41	; 65
 116:	0e 94 c8 00 	call	0x190	; 0x190 <LED_off>
			LED_off(LED2_PORT,LED2_PIN);
 11a:	62 e0       	ldi	r22, 0x02	; 2
 11c:	81 e4       	ldi	r24, 0x41	; 65
 11e:	0e 94 c8 00 	call	0x190	; 0x190 <LED_off>
			LED_off(LED3_PORT,LED3_PIN);			
 122:	63 e0       	ldi	r22, 0x03	; 3
 124:	81 e4       	ldi	r24, 0x41	; 65
 126:	0e 94 c8 00 	call	0x190	; 0x190 <LED_off>
			break;
 12a:	08 95       	ret
			case 1:
			LED_on(LED0_PORT,LED0_PIN);
 12c:	60 e0       	ldi	r22, 0x00	; 0
 12e:	81 e4       	ldi	r24, 0x41	; 65
 130:	0e 94 c4 00 	call	0x188	; 0x188 <LED_on>
			break;
 134:	08 95       	ret
			case 2:
			LED_on(LED1_PORT,LED1_PIN);
 136:	61 e0       	ldi	r22, 0x01	; 1
 138:	81 e4       	ldi	r24, 0x41	; 65
 13a:	0e 94 c4 00 	call	0x188	; 0x188 <LED_on>
			break;
 13e:	08 95       	ret
			case 3:
			LED_on(LED2_PORT,LED2_PIN);
 140:	62 e0       	ldi	r22, 0x02	; 2
 142:	81 e4       	ldi	r24, 0x41	; 65
 144:	0e 94 c4 00 	call	0x188	; 0x188 <LED_on>
			break;
 148:	08 95       	ret
			case 4:
			LED_on(LED3_PORT,LED3_PIN);
 14a:	63 e0       	ldi	r22, 0x03	; 3
 14c:	81 e4       	ldi	r24, 0x41	; 65
 14e:	0e 94 c4 00 	call	0x188	; 0x188 <LED_on>
			break;
 152:	08 95       	ret
			case 5:
			LED_off(LED3_PORT,LED3_PIN);
 154:	63 e0       	ldi	r22, 0x03	; 3
 156:	81 e4       	ldi	r24, 0x41	; 65
 158:	0e 94 c8 00 	call	0x190	; 0x190 <LED_off>
			break;
 15c:	08 95       	ret
			case 6:
			LED_off(LED2_PORT,LED2_PIN);
 15e:	62 e0       	ldi	r22, 0x02	; 2
 160:	81 e4       	ldi	r24, 0x41	; 65
 162:	0e 94 c8 00 	call	0x190	; 0x190 <LED_off>
			break;
 166:	08 95       	ret
			case 7:
			LED_off(LED1_PORT,LED1_PIN);
 168:	61 e0       	ldi	r22, 0x01	; 1
 16a:	81 e4       	ldi	r24, 0x41	; 65
 16c:	0e 94 c8 00 	call	0x190	; 0x190 <LED_off>
 170:	08 95       	ret

00000172 <BUTTON_init>:
 * Created: 4/9/2023 9:10:35 AM
 *  Author: MOHAMED ABDELSALAM
 */ 
#include "button.h"
void BUTTON_init (uint8_t buttonport, uint8_t buttonpin){
	DIO_init(buttonport,buttonpin,IN);
 172:	40 e0       	ldi	r20, 0x00	; 0
 174:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <DIO_init>
 178:	08 95       	ret

0000017a <BUTTON_read>:
}
void BUTTON_read (uint8_t buttonport, uint8_t buttonpin, uint8_t *value){
	DIO_read(buttonport,buttonpin,value);
 17a:	0e 94 c1 01 	call	0x382	; 0x382 <DIO_read>
 17e:	08 95       	ret

00000180 <LED_init>:
 *  Author: MOHAMED ABDELSALAM
 */ 
#include "led.h"

void LED_init (uint8_t port, uint8_t pin){
	DIO_init(port,pin,OUT);
 180:	41 e0       	ldi	r20, 0x01	; 1
 182:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <DIO_init>
 186:	08 95       	ret

00000188 <LED_on>:
}
void LED_on (uint8_t port, uint8_t pin){
	DIO_write(port,pin,HIGH);
 188:	41 e0       	ldi	r20, 0x01	; 1
 18a:	0e 94 49 01 	call	0x292	; 0x292 <DIO_write>
 18e:	08 95       	ret

00000190 <LED_off>:
}
void LED_off (uint8_t port, uint8_t pin){
	DIO_write(port,pin,LOW);
 190:	40 e0       	ldi	r20, 0x00	; 0
 192:	0e 94 49 01 	call	0x292	; 0x292 <DIO_write>
 196:	08 95       	ret

00000198 <main>:


int main(void)
{
	
	APP_init();
 198:	0e 94 46 00 	call	0x8c	; 0x8c <APP_init>
	
    /* Replace with your application code */
    while (1) 
    {
		APP_start();
 19c:	0e 94 5b 00 	call	0xb6	; 0xb6 <APP_start>
 1a0:	fd cf       	rjmp	.-6      	; 0x19c <main+0x4>

000001a2 <DIO_init>:
 * Created: 4/8/2023 11:45:35 PM
 *  Author: MOHAMED ABDELSALAM
 */ 
#include "dio.h"
void DIO_init (uint8_t portNumber,uint8_t pinNumber,uint8_t direction){
	switch(portNumber)
 1a2:	82 34       	cpi	r24, 0x42	; 66
 1a4:	29 f1       	breq	.+74     	; 0x1f0 <DIO_init+0x4e>
 1a6:	18 f4       	brcc	.+6      	; 0x1ae <DIO_init+0xc>
 1a8:	81 34       	cpi	r24, 0x41	; 65
 1aa:	39 f0       	breq	.+14     	; 0x1ba <DIO_init+0x18>
 1ac:	08 95       	ret
 1ae:	83 34       	cpi	r24, 0x43	; 67
 1b0:	d1 f1       	breq	.+116    	; 0x226 <DIO_init+0x84>
 1b2:	84 34       	cpi	r24, 0x44	; 68
 1b4:	09 f4       	brne	.+2      	; 0x1b8 <DIO_init+0x16>
 1b6:	52 c0       	rjmp	.+164    	; 0x25c <DIO_init+0xba>
 1b8:	08 95       	ret
	{
		case 'A':
		if (direction == OUT)
 1ba:	41 30       	cpi	r20, 0x01	; 1
 1bc:	59 f4       	brne	.+22     	; 0x1d4 <DIO_init+0x32>
		{
			DDRA |= (1<<pinNumber);    //set
 1be:	2a b3       	in	r18, 0x1a	; 26
 1c0:	81 e0       	ldi	r24, 0x01	; 1
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	02 c0       	rjmp	.+4      	; 0x1ca <DIO_init+0x28>
 1c6:	88 0f       	add	r24, r24
 1c8:	99 1f       	adc	r25, r25
 1ca:	6a 95       	dec	r22
 1cc:	e2 f7       	brpl	.-8      	; 0x1c6 <DIO_init+0x24>
 1ce:	82 2b       	or	r24, r18
 1d0:	8a bb       	out	0x1a, r24	; 26
 1d2:	08 95       	ret
		}
		else if (direction == IN)
 1d4:	41 11       	cpse	r20, r1
 1d6:	5c c0       	rjmp	.+184    	; 0x290 <DIO_init+0xee>
		{
			DDRA &= ~(1<<pinNumber);   //clear
 1d8:	2a b3       	in	r18, 0x1a	; 26
 1da:	81 e0       	ldi	r24, 0x01	; 1
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	02 c0       	rjmp	.+4      	; 0x1e4 <DIO_init+0x42>
 1e0:	88 0f       	add	r24, r24
 1e2:	99 1f       	adc	r25, r25
 1e4:	6a 95       	dec	r22
 1e6:	e2 f7       	brpl	.-8      	; 0x1e0 <DIO_init+0x3e>
 1e8:	80 95       	com	r24
 1ea:	82 23       	and	r24, r18
 1ec:	8a bb       	out	0x1a, r24	; 26
 1ee:	08 95       	ret
		}		
		break;
		case 'B':
		if (direction == OUT)
 1f0:	41 30       	cpi	r20, 0x01	; 1
 1f2:	59 f4       	brne	.+22     	; 0x20a <DIO_init+0x68>
		{
			DDRB |= (1<<pinNumber);
 1f4:	27 b3       	in	r18, 0x17	; 23
 1f6:	81 e0       	ldi	r24, 0x01	; 1
 1f8:	90 e0       	ldi	r25, 0x00	; 0
 1fa:	02 c0       	rjmp	.+4      	; 0x200 <DIO_init+0x5e>
 1fc:	88 0f       	add	r24, r24
 1fe:	99 1f       	adc	r25, r25
 200:	6a 95       	dec	r22
 202:	e2 f7       	brpl	.-8      	; 0x1fc <DIO_init+0x5a>
 204:	82 2b       	or	r24, r18
 206:	87 bb       	out	0x17, r24	; 23
 208:	08 95       	ret
		}
		else if (direction == IN)
 20a:	41 11       	cpse	r20, r1
 20c:	41 c0       	rjmp	.+130    	; 0x290 <DIO_init+0xee>
		{
			DDRB &= ~(1<<pinNumber);
 20e:	27 b3       	in	r18, 0x17	; 23
 210:	81 e0       	ldi	r24, 0x01	; 1
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	02 c0       	rjmp	.+4      	; 0x21a <DIO_init+0x78>
 216:	88 0f       	add	r24, r24
 218:	99 1f       	adc	r25, r25
 21a:	6a 95       	dec	r22
 21c:	e2 f7       	brpl	.-8      	; 0x216 <DIO_init+0x74>
 21e:	80 95       	com	r24
 220:	82 23       	and	r24, r18
 222:	87 bb       	out	0x17, r24	; 23
 224:	08 95       	ret
		}
		break;
		case 'C':
			if (direction == OUT)
 226:	41 30       	cpi	r20, 0x01	; 1
 228:	59 f4       	brne	.+22     	; 0x240 <DIO_init+0x9e>
			{
				DDRC |= (1<<pinNumber);
 22a:	24 b3       	in	r18, 0x14	; 20
 22c:	81 e0       	ldi	r24, 0x01	; 1
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	02 c0       	rjmp	.+4      	; 0x236 <DIO_init+0x94>
 232:	88 0f       	add	r24, r24
 234:	99 1f       	adc	r25, r25
 236:	6a 95       	dec	r22
 238:	e2 f7       	brpl	.-8      	; 0x232 <DIO_init+0x90>
 23a:	82 2b       	or	r24, r18
 23c:	84 bb       	out	0x14, r24	; 20
 23e:	08 95       	ret
			}
			else if (direction == IN)
 240:	41 11       	cpse	r20, r1
 242:	26 c0       	rjmp	.+76     	; 0x290 <DIO_init+0xee>
			{
				DDRC &= ~(1<<pinNumber);
 244:	24 b3       	in	r18, 0x14	; 20
 246:	81 e0       	ldi	r24, 0x01	; 1
 248:	90 e0       	ldi	r25, 0x00	; 0
 24a:	02 c0       	rjmp	.+4      	; 0x250 <DIO_init+0xae>
 24c:	88 0f       	add	r24, r24
 24e:	99 1f       	adc	r25, r25
 250:	6a 95       	dec	r22
 252:	e2 f7       	brpl	.-8      	; 0x24c <DIO_init+0xaa>
 254:	80 95       	com	r24
 256:	82 23       	and	r24, r18
 258:	84 bb       	out	0x14, r24	; 20
 25a:	08 95       	ret
			}
		break;				
		case 'D':
			if (direction == OUT)
 25c:	41 30       	cpi	r20, 0x01	; 1
 25e:	59 f4       	brne	.+22     	; 0x276 <DIO_init+0xd4>
			{
				DDRD |= (1<<pinNumber);
 260:	21 b3       	in	r18, 0x11	; 17
 262:	81 e0       	ldi	r24, 0x01	; 1
 264:	90 e0       	ldi	r25, 0x00	; 0
 266:	02 c0       	rjmp	.+4      	; 0x26c <DIO_init+0xca>
 268:	88 0f       	add	r24, r24
 26a:	99 1f       	adc	r25, r25
 26c:	6a 95       	dec	r22
 26e:	e2 f7       	brpl	.-8      	; 0x268 <DIO_init+0xc6>
 270:	82 2b       	or	r24, r18
 272:	81 bb       	out	0x11, r24	; 17
 274:	08 95       	ret
			}
			else if (direction == IN)
 276:	41 11       	cpse	r20, r1
 278:	0b c0       	rjmp	.+22     	; 0x290 <DIO_init+0xee>
			{
				DDRD &= ~(1<<pinNumber);
 27a:	21 b3       	in	r18, 0x11	; 17
 27c:	81 e0       	ldi	r24, 0x01	; 1
 27e:	90 e0       	ldi	r25, 0x00	; 0
 280:	02 c0       	rjmp	.+4      	; 0x286 <DIO_init+0xe4>
 282:	88 0f       	add	r24, r24
 284:	99 1f       	adc	r25, r25
 286:	6a 95       	dec	r22
 288:	e2 f7       	brpl	.-8      	; 0x282 <DIO_init+0xe0>
 28a:	80 95       	com	r24
 28c:	82 23       	and	r24, r18
 28e:	81 bb       	out	0x11, r24	; 17
 290:	08 95       	ret

00000292 <DIO_write>:
		break;		
		}
	
}
void DIO_write (uint8_t portNumber,uint8_t pinNumber,uint8_t value){
	switch(portNumber)
 292:	82 34       	cpi	r24, 0x42	; 66
 294:	29 f1       	breq	.+74     	; 0x2e0 <DIO_write+0x4e>
 296:	18 f4       	brcc	.+6      	; 0x29e <DIO_write+0xc>
 298:	81 34       	cpi	r24, 0x41	; 65
 29a:	39 f0       	breq	.+14     	; 0x2aa <DIO_write+0x18>
 29c:	08 95       	ret
 29e:	83 34       	cpi	r24, 0x43	; 67
 2a0:	d1 f1       	breq	.+116    	; 0x316 <DIO_write+0x84>
 2a2:	84 34       	cpi	r24, 0x44	; 68
 2a4:	09 f4       	brne	.+2      	; 0x2a8 <DIO_write+0x16>
 2a6:	52 c0       	rjmp	.+164    	; 0x34c <DIO_write+0xba>
 2a8:	08 95       	ret
	{
		case 'A':
			if (value == HIGH)
 2aa:	41 30       	cpi	r20, 0x01	; 1
 2ac:	59 f4       	brne	.+22     	; 0x2c4 <DIO_write+0x32>
			{
				PORTA |= (1<<pinNumber);
 2ae:	2b b3       	in	r18, 0x1b	; 27
 2b0:	81 e0       	ldi	r24, 0x01	; 1
 2b2:	90 e0       	ldi	r25, 0x00	; 0
 2b4:	02 c0       	rjmp	.+4      	; 0x2ba <DIO_write+0x28>
 2b6:	88 0f       	add	r24, r24
 2b8:	99 1f       	adc	r25, r25
 2ba:	6a 95       	dec	r22
 2bc:	e2 f7       	brpl	.-8      	; 0x2b6 <DIO_write+0x24>
 2be:	82 2b       	or	r24, r18
 2c0:	8b bb       	out	0x1b, r24	; 27
 2c2:	08 95       	ret
			}
			else if (value == LOW)
 2c4:	41 11       	cpse	r20, r1
 2c6:	5c c0       	rjmp	.+184    	; 0x380 <DIO_write+0xee>
			{
				PORTA &= ~(1<<pinNumber);
 2c8:	2b b3       	in	r18, 0x1b	; 27
 2ca:	81 e0       	ldi	r24, 0x01	; 1
 2cc:	90 e0       	ldi	r25, 0x00	; 0
 2ce:	02 c0       	rjmp	.+4      	; 0x2d4 <DIO_write+0x42>
 2d0:	88 0f       	add	r24, r24
 2d2:	99 1f       	adc	r25, r25
 2d4:	6a 95       	dec	r22
 2d6:	e2 f7       	brpl	.-8      	; 0x2d0 <DIO_write+0x3e>
 2d8:	80 95       	com	r24
 2da:	82 23       	and	r24, r18
 2dc:	8b bb       	out	0x1b, r24	; 27
 2de:	08 95       	ret
			}
		break;
		case 'B':
			if (value == HIGH)
 2e0:	41 30       	cpi	r20, 0x01	; 1
 2e2:	59 f4       	brne	.+22     	; 0x2fa <DIO_write+0x68>
			{
				PORTB |= (1<<pinNumber);
 2e4:	28 b3       	in	r18, 0x18	; 24
 2e6:	81 e0       	ldi	r24, 0x01	; 1
 2e8:	90 e0       	ldi	r25, 0x00	; 0
 2ea:	02 c0       	rjmp	.+4      	; 0x2f0 <DIO_write+0x5e>
 2ec:	88 0f       	add	r24, r24
 2ee:	99 1f       	adc	r25, r25
 2f0:	6a 95       	dec	r22
 2f2:	e2 f7       	brpl	.-8      	; 0x2ec <DIO_write+0x5a>
 2f4:	82 2b       	or	r24, r18
 2f6:	88 bb       	out	0x18, r24	; 24
 2f8:	08 95       	ret
			}
			else if (value == LOW)
 2fa:	41 11       	cpse	r20, r1
 2fc:	41 c0       	rjmp	.+130    	; 0x380 <DIO_write+0xee>
			{
				PORTB &= ~(1<<pinNumber);
 2fe:	28 b3       	in	r18, 0x18	; 24
 300:	81 e0       	ldi	r24, 0x01	; 1
 302:	90 e0       	ldi	r25, 0x00	; 0
 304:	02 c0       	rjmp	.+4      	; 0x30a <DIO_write+0x78>
 306:	88 0f       	add	r24, r24
 308:	99 1f       	adc	r25, r25
 30a:	6a 95       	dec	r22
 30c:	e2 f7       	brpl	.-8      	; 0x306 <DIO_write+0x74>
 30e:	80 95       	com	r24
 310:	82 23       	and	r24, r18
 312:	88 bb       	out	0x18, r24	; 24
 314:	08 95       	ret
			}
		break;
		case 'C':
			if (value == HIGH)
 316:	41 30       	cpi	r20, 0x01	; 1
 318:	59 f4       	brne	.+22     	; 0x330 <DIO_write+0x9e>
			{
				PORTC |= (1<<pinNumber);
 31a:	25 b3       	in	r18, 0x15	; 21
 31c:	81 e0       	ldi	r24, 0x01	; 1
 31e:	90 e0       	ldi	r25, 0x00	; 0
 320:	02 c0       	rjmp	.+4      	; 0x326 <DIO_write+0x94>
 322:	88 0f       	add	r24, r24
 324:	99 1f       	adc	r25, r25
 326:	6a 95       	dec	r22
 328:	e2 f7       	brpl	.-8      	; 0x322 <DIO_write+0x90>
 32a:	82 2b       	or	r24, r18
 32c:	85 bb       	out	0x15, r24	; 21
 32e:	08 95       	ret
			}
			else if (value == LOW)
 330:	41 11       	cpse	r20, r1
 332:	26 c0       	rjmp	.+76     	; 0x380 <DIO_write+0xee>
			{
				PORTC &= ~(1<<pinNumber);
 334:	25 b3       	in	r18, 0x15	; 21
 336:	81 e0       	ldi	r24, 0x01	; 1
 338:	90 e0       	ldi	r25, 0x00	; 0
 33a:	02 c0       	rjmp	.+4      	; 0x340 <DIO_write+0xae>
 33c:	88 0f       	add	r24, r24
 33e:	99 1f       	adc	r25, r25
 340:	6a 95       	dec	r22
 342:	e2 f7       	brpl	.-8      	; 0x33c <DIO_write+0xaa>
 344:	80 95       	com	r24
 346:	82 23       	and	r24, r18
 348:	85 bb       	out	0x15, r24	; 21
 34a:	08 95       	ret
			}
		break;
		case 'D':
			if (value == HIGH)
 34c:	41 30       	cpi	r20, 0x01	; 1
 34e:	59 f4       	brne	.+22     	; 0x366 <DIO_write+0xd4>
			{
				PORTD |= (1<<pinNumber);
 350:	22 b3       	in	r18, 0x12	; 18
 352:	81 e0       	ldi	r24, 0x01	; 1
 354:	90 e0       	ldi	r25, 0x00	; 0
 356:	02 c0       	rjmp	.+4      	; 0x35c <DIO_write+0xca>
 358:	88 0f       	add	r24, r24
 35a:	99 1f       	adc	r25, r25
 35c:	6a 95       	dec	r22
 35e:	e2 f7       	brpl	.-8      	; 0x358 <DIO_write+0xc6>
 360:	82 2b       	or	r24, r18
 362:	82 bb       	out	0x12, r24	; 18
 364:	08 95       	ret
			}
			else if (value == LOW)
 366:	41 11       	cpse	r20, r1
 368:	0b c0       	rjmp	.+22     	; 0x380 <DIO_write+0xee>
			{
				PORTD &= ~(1<<pinNumber);
 36a:	22 b3       	in	r18, 0x12	; 18
 36c:	81 e0       	ldi	r24, 0x01	; 1
 36e:	90 e0       	ldi	r25, 0x00	; 0
 370:	02 c0       	rjmp	.+4      	; 0x376 <DIO_write+0xe4>
 372:	88 0f       	add	r24, r24
 374:	99 1f       	adc	r25, r25
 376:	6a 95       	dec	r22
 378:	e2 f7       	brpl	.-8      	; 0x372 <DIO_write+0xe0>
 37a:	80 95       	com	r24
 37c:	82 23       	and	r24, r18
 37e:	82 bb       	out	0x12, r24	; 18
 380:	08 95       	ret

00000382 <DIO_read>:
		break;
	}	
}
void DIO_read (uint8_t portNumber,uint8_t pinNumber,uint8_t *data){
	
		switch(portNumber)
 382:	82 34       	cpi	r24, 0x42	; 66
 384:	01 f1       	breq	.+64     	; 0x3c6 <DIO_read+0x44>
 386:	18 f4       	brcc	.+6      	; 0x38e <DIO_read+0xc>
 388:	81 34       	cpi	r24, 0x41	; 65
 38a:	39 f0       	breq	.+14     	; 0x39a <DIO_read+0x18>
 38c:	08 95       	ret
 38e:	83 34       	cpi	r24, 0x43	; 67
 390:	81 f1       	breq	.+96     	; 0x3f2 <DIO_read+0x70>
 392:	84 34       	cpi	r24, 0x44	; 68
 394:	09 f4       	brne	.+2      	; 0x398 <DIO_read+0x16>
 396:	43 c0       	rjmp	.+134    	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
 398:	08 95       	ret
		{
			case 'A':
			
				*data = ((PINA &(1<<pinNumber))>>pinNumber);
 39a:	79 b3       	in	r23, 0x19	; 25
 39c:	81 e0       	ldi	r24, 0x01	; 1
 39e:	90 e0       	ldi	r25, 0x00	; 0
 3a0:	9c 01       	movw	r18, r24
 3a2:	06 2e       	mov	r0, r22
 3a4:	02 c0       	rjmp	.+4      	; 0x3aa <DIO_read+0x28>
 3a6:	22 0f       	add	r18, r18
 3a8:	33 1f       	adc	r19, r19
 3aa:	0a 94       	dec	r0
 3ac:	e2 f7       	brpl	.-8      	; 0x3a6 <DIO_read+0x24>
 3ae:	87 2f       	mov	r24, r23
 3b0:	90 e0       	ldi	r25, 0x00	; 0
 3b2:	82 23       	and	r24, r18
 3b4:	93 23       	and	r25, r19
 3b6:	02 c0       	rjmp	.+4      	; 0x3bc <DIO_read+0x3a>
 3b8:	95 95       	asr	r25
 3ba:	87 95       	ror	r24
 3bc:	6a 95       	dec	r22
 3be:	e2 f7       	brpl	.-8      	; 0x3b8 <DIO_read+0x36>
 3c0:	fa 01       	movw	r30, r20
 3c2:	80 83       	st	Z, r24
				
			break;
 3c4:	08 95       	ret
			case 'B':
				*data = ((PINB &(1<<pinNumber))>>pinNumber);
 3c6:	76 b3       	in	r23, 0x16	; 22
 3c8:	81 e0       	ldi	r24, 0x01	; 1
 3ca:	90 e0       	ldi	r25, 0x00	; 0
 3cc:	9c 01       	movw	r18, r24
 3ce:	06 2e       	mov	r0, r22
 3d0:	02 c0       	rjmp	.+4      	; 0x3d6 <DIO_read+0x54>
 3d2:	22 0f       	add	r18, r18
 3d4:	33 1f       	adc	r19, r19
 3d6:	0a 94       	dec	r0
 3d8:	e2 f7       	brpl	.-8      	; 0x3d2 <DIO_read+0x50>
 3da:	87 2f       	mov	r24, r23
 3dc:	90 e0       	ldi	r25, 0x00	; 0
 3de:	82 23       	and	r24, r18
 3e0:	93 23       	and	r25, r19
 3e2:	02 c0       	rjmp	.+4      	; 0x3e8 <DIO_read+0x66>
 3e4:	95 95       	asr	r25
 3e6:	87 95       	ror	r24
 3e8:	6a 95       	dec	r22
 3ea:	e2 f7       	brpl	.-8      	; 0x3e4 <DIO_read+0x62>
 3ec:	fa 01       	movw	r30, r20
 3ee:	80 83       	st	Z, r24
			break;
 3f0:	08 95       	ret
			case 'C':
				*data = ((PINC &(1<<pinNumber))>>pinNumber);
 3f2:	73 b3       	in	r23, 0x13	; 19
 3f4:	81 e0       	ldi	r24, 0x01	; 1
 3f6:	90 e0       	ldi	r25, 0x00	; 0
 3f8:	9c 01       	movw	r18, r24
 3fa:	06 2e       	mov	r0, r22
 3fc:	02 c0       	rjmp	.+4      	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
 3fe:	22 0f       	add	r18, r18
 400:	33 1f       	adc	r19, r19
 402:	0a 94       	dec	r0
 404:	e2 f7       	brpl	.-8      	; 0x3fe <DIO_read+0x7c>
 406:	87 2f       	mov	r24, r23
 408:	90 e0       	ldi	r25, 0x00	; 0
 40a:	82 23       	and	r24, r18
 40c:	93 23       	and	r25, r19
 40e:	02 c0       	rjmp	.+4      	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
 410:	95 95       	asr	r25
 412:	87 95       	ror	r24
 414:	6a 95       	dec	r22
 416:	e2 f7       	brpl	.-8      	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
 418:	fa 01       	movw	r30, r20
 41a:	80 83       	st	Z, r24
			break;
 41c:	08 95       	ret
			case 'D':
				*data = ((PIND &(1<<pinNumber))>>pinNumber);
 41e:	70 b3       	in	r23, 0x10	; 16
 420:	81 e0       	ldi	r24, 0x01	; 1
 422:	90 e0       	ldi	r25, 0x00	; 0
 424:	9c 01       	movw	r18, r24
 426:	06 2e       	mov	r0, r22
 428:	02 c0       	rjmp	.+4      	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
 42a:	22 0f       	add	r18, r18
 42c:	33 1f       	adc	r19, r19
 42e:	0a 94       	dec	r0
 430:	e2 f7       	brpl	.-8      	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
 432:	87 2f       	mov	r24, r23
 434:	90 e0       	ldi	r25, 0x00	; 0
 436:	82 23       	and	r24, r18
 438:	93 23       	and	r25, r19
 43a:	02 c0       	rjmp	.+4      	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
 43c:	95 95       	asr	r25
 43e:	87 95       	ror	r24
 440:	6a 95       	dec	r22
 442:	e2 f7       	brpl	.-8      	; 0x43c <__EEPROM_REGION_LENGTH__+0x3c>
 444:	fa 01       	movw	r30, r20
 446:	80 83       	st	Z, r24
 448:	08 95       	ret

0000044a <TIMER_init>:
void TIMER_getStatus(uint8_t *value){
	if ((TIFR & clear) == 0)
	{
		*value = 0x01;
	}
	else if ((TIFR & clear) == 1)
 44a:	95 b5       	in	r25, 0x25	; 37
 44c:	89 23       	and	r24, r25
 44e:	85 bd       	out	0x25, r24	; 37
 450:	64 bd       	out	0x24, r22	; 36
 452:	08 95       	ret

00000454 <TIMER_start>:
 454:	95 b5       	in	r25, 0x25	; 37
 456:	89 2b       	or	r24, r25
 458:	85 bd       	out	0x25, r24	; 37
 45a:	08 95       	ret

0000045c <TIMER_set>:
 45c:	84 bd       	out	0x24, r24	; 36
 45e:	08 95       	ret

00000460 <TIMER_Stop>:
		TIFR |= clear;
	}
}
	void TIMER_Stop (void){
		//Timer Stop
		TCCR2 = no_clk;	
 460:	15 bc       	out	0x25, r1	; 37
 462:	08 95       	ret

00000464 <Delay>:
 * Created: 4/16/2023 8:16:02 PM
 *  Author: lenovo
 */ 
#include "delay.h"
void Delay(uint32_t milliseconds)
{
 464:	ef 92       	push	r14
 466:	ff 92       	push	r15
 468:	0f 93       	push	r16
 46a:	1f 93       	push	r17
 46c:	cf 93       	push	r28
 46e:	7c 01       	movw	r14, r24
	TIMER_init (normal,ticks_250);
 470:	67 e0       	ldi	r22, 0x07	; 7
 472:	87 eb       	ldi	r24, 0xB7	; 183
 474:	0e 94 25 02 	call	0x44a	; 0x44a <TIMER_init>
	TIMER_start (pres_8);
 478:	82 e0       	ldi	r24, 0x02	; 2
 47a:	0e 94 2a 02 	call	0x454	; 0x454 <TIMER_start>
	uint32_t i;
	uint8_t counter;
	
	for(i=0;i< milliseconds ;i++){
 47e:	00 e0       	ldi	r16, 0x00	; 0
 480:	10 e0       	ldi	r17, 0x00	; 0
 482:	10 c0       	rjmp	.+32     	; 0x4a4 <Delay+0x40>
		// N = (1000us)/(250u);  //= 4 without approximation
		//for one millisecond delay iterate 4 times of timer2 overflow
		counter = 0;
		while(counter<4){
			
			while((TIFR & clear) == 0);
 484:	08 b6       	in	r0, 0x38	; 56
 486:	06 fe       	sbrs	r0, 6
 488:	fd cf       	rjmp	.-6      	; 0x484 <Delay+0x20>
			TIMER_set(ticks_250);
 48a:	87 e0       	ldi	r24, 0x07	; 7
 48c:	0e 94 2e 02 	call	0x45c	; 0x45c <TIMER_set>
			TIFR |= clear;
 490:	88 b7       	in	r24, 0x38	; 56
 492:	80 64       	ori	r24, 0x40	; 64
 494:	88 bf       	out	0x38, r24	; 56
			counter++;
 496:	cf 5f       	subi	r28, 0xFF	; 255
 498:	01 c0       	rjmp	.+2      	; 0x49c <Delay+0x38>
 49a:	c0 e0       	ldi	r28, 0x00	; 0
	for(i=0;i< milliseconds ;i++){
		
		// N = (1000us)/(250u);  //= 4 without approximation
		//for one millisecond delay iterate 4 times of timer2 overflow
		counter = 0;
		while(counter<4){
 49c:	c4 30       	cpi	r28, 0x04	; 4
 49e:	90 f3       	brcs	.-28     	; 0x484 <Delay+0x20>
	TIMER_init (normal,ticks_250);
	TIMER_start (pres_8);
	uint32_t i;
	uint8_t counter;
	
	for(i=0;i< milliseconds ;i++){
 4a0:	0f 5f       	subi	r16, 0xFF	; 255
 4a2:	1f 4f       	sbci	r17, 0xFF	; 255
 4a4:	0e 15       	cp	r16, r14
 4a6:	1f 05       	cpc	r17, r15
 4a8:	c0 f3       	brcs	.-16     	; 0x49a <Delay+0x36>
			counter++;
		}
		

	}
	TIMER_Stop ();
 4aa:	0e 94 30 02 	call	0x460	; 0x460 <TIMER_Stop>
 4ae:	cf 91       	pop	r28
 4b0:	1f 91       	pop	r17
 4b2:	0f 91       	pop	r16
 4b4:	ff 90       	pop	r15
 4b6:	ef 90       	pop	r14
 4b8:	08 95       	ret

000004ba <__tablejump2__>:
 4ba:	ee 0f       	add	r30, r30
 4bc:	ff 1f       	adc	r31, r31
 4be:	05 90       	lpm	r0, Z+
 4c0:	f4 91       	lpm	r31, Z
 4c2:	e0 2d       	mov	r30, r0
 4c4:	09 94       	ijmp

000004c6 <_exit>:
 4c6:	f8 94       	cli

000004c8 <__stop_program>:
 4c8:	ff cf       	rjmp	.-2      	; 0x4c8 <__stop_program>
