
LED sequence V2.0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000005d6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000064a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000b  00800060  00800060  0000064a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000064a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000067c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000188  00000000  00000000  000006b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001111  00000000  00000000  00000840  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008c0  00000000  00000000  00001951  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a0f  00000000  00000000  00002211  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003e4  00000000  00000000  00002c20  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000597  00000000  00000000  00003004  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000009e7  00000000  00000000  0000359b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000128  00000000  00000000  00003f82  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 32 00 	jmp	0x64	; 0x64 <__ctors_end>
   4:	0c 94 16 02 	jmp	0x42c	; 0x42c <__vector_1>
   8:	0c 94 3f 02 	jmp	0x47e	; 0x47e <__vector_2>
   c:	0c 94 68 02 	jmp	0x4d0	; 0x4d0 <__vector_3>
  10:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  14:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  18:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  1c:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  20:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  24:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  28:	0c 94 91 02 	jmp	0x522	; 0x522 <__vector_10>
  2c:	0c 94 ba 02 	jmp	0x574	; 0x574 <__vector_11>
  30:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  34:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  38:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  3c:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  40:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  44:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  48:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  4c:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  50:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  54:	78 00       	.word	0x0078	; ????
  56:	89 00       	.word	0x0089	; ????
  58:	8e 00       	.word	0x008e	; ????
  5a:	93 00       	.word	0x0093	; ????
  5c:	98 00       	.word	0x0098	; ????
  5e:	9d 00       	.word	0x009d	; ????
  60:	a2 00       	.word	0x00a2	; ????
  62:	a7 00       	.word	0x00a7	; ????

00000064 <__ctors_end>:
  64:	11 24       	eor	r1, r1
  66:	1f be       	out	0x3f, r1	; 63
  68:	cf e5       	ldi	r28, 0x5F	; 95
  6a:	d8 e0       	ldi	r29, 0x08	; 8
  6c:	de bf       	out	0x3e, r29	; 62
  6e:	cd bf       	out	0x3d, r28	; 61

00000070 <__do_clear_bss>:
  70:	20 e0       	ldi	r18, 0x00	; 0
  72:	a0 e6       	ldi	r26, 0x60	; 96
  74:	b0 e0       	ldi	r27, 0x00	; 0
  76:	01 c0       	rjmp	.+2      	; 0x7a <.do_clear_bss_start>

00000078 <.do_clear_bss_loop>:
  78:	1d 92       	st	X+, r1

0000007a <.do_clear_bss_start>:
  7a:	ab 36       	cpi	r26, 0x6B	; 107
  7c:	b2 07       	cpc	r27, r18
  7e:	e1 f7       	brne	.-8      	; 0x78 <.do_clear_bss_loop>
  80:	0e 94 bc 00 	call	0x178	; 0x178 <main>
  84:	0c 94 e9 02 	jmp	0x5d2	; 0x5d2 <_exit>

00000088 <__bad_interrupt>:
  88:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000008c <EX_INT0_ISR>:
#define number_of_states 7
uint8_t state_number = 0;


void EX_INT0_ISR (void){
	if (state_number < number_of_states){
  8c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  90:	87 30       	cpi	r24, 0x07	; 7
  92:	20 f4       	brcc	.+8      	; 0x9c <EX_INT0_ISR+0x10>
		state_number++;
  94:	8f 5f       	subi	r24, 0xFF	; 255
  96:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
  9a:	08 95       	ret
		
	}
	else{
		state_number =0;
  9c:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
  a0:	08 95       	ret

000000a2 <APP_init>:
	}
}
void APP_init(void)
{
		LED_init(LED0_PORT,LED0_PIN);
  a2:	60 e0       	ldi	r22, 0x00	; 0
  a4:	81 e4       	ldi	r24, 0x41	; 65
  a6:	0e 94 b0 00 	call	0x160	; 0x160 <LED_init>
		LED_init(LED1_PORT,LED1_PIN);
  aa:	61 e0       	ldi	r22, 0x01	; 1
  ac:	81 e4       	ldi	r24, 0x41	; 65
  ae:	0e 94 b0 00 	call	0x160	; 0x160 <LED_init>
		LED_init(LED2_PORT,LED2_PIN);
  b2:	62 e0       	ldi	r22, 0x02	; 2
  b4:	81 e4       	ldi	r24, 0x41	; 65
  b6:	0e 94 b0 00 	call	0x160	; 0x160 <LED_init>
		LED_init(LED3_PORT,LED3_PIN);
  ba:	63 e0       	ldi	r22, 0x03	; 3
  bc:	81 e4       	ldi	r24, 0x41	; 65
  be:	0e 94 b0 00 	call	0x160	; 0x160 <LED_init>
		BUTTON_init (EX_INT0_PORT, EX_INT0_PIN);	
  c2:	62 e0       	ldi	r22, 0x02	; 2
  c4:	84 e4       	ldi	r24, 0x44	; 68
  c6:	0e 94 ac 00 	call	0x158	; 0x158 <BUTTON_init>
		EX_INT0_SET_CALLBACK (EX_INT0_ISR);
  ca:	86 e4       	ldi	r24, 0x46	; 70
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	0e 94 11 02 	call	0x422	; 0x422 <EX_INT0_SET_CALLBACK>
		
		EX_INT_init(INT0 , rising_edge);
  d2:	62 e0       	ldi	r22, 0x02	; 2
  d4:	86 e0       	ldi	r24, 0x06	; 6
  d6:	0e 94 01 02 	call	0x402	; 0x402 <EX_INT_init>
  da:	08 95       	ret

000000dc <APP_start>:
		
}

void APP_start(void){	
	while(1){
		switch(state_number)
  dc:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  e0:	f0 e0       	ldi	r31, 0x00	; 0
  e2:	e8 30       	cpi	r30, 0x08	; 8
  e4:	f1 05       	cpc	r31, r1
  e6:	d0 f7       	brcc	.-12     	; 0xdc <APP_start>
  e8:	e6 5d       	subi	r30, 0xD6	; 214
  ea:	ff 4f       	sbci	r31, 0xFF	; 255
  ec:	0c 94 e3 02 	jmp	0x5c6	; 0x5c6 <__tablejump2__>
		{
			case 0:
			LED_off(LED0_PORT,LED0_PIN);
  f0:	60 e0       	ldi	r22, 0x00	; 0
  f2:	81 e4       	ldi	r24, 0x41	; 65
  f4:	0e 94 b8 00 	call	0x170	; 0x170 <LED_off>
			LED_off(LED1_PORT,LED1_PIN);
  f8:	61 e0       	ldi	r22, 0x01	; 1
  fa:	81 e4       	ldi	r24, 0x41	; 65
  fc:	0e 94 b8 00 	call	0x170	; 0x170 <LED_off>
			LED_off(LED2_PORT,LED2_PIN);
 100:	62 e0       	ldi	r22, 0x02	; 2
 102:	81 e4       	ldi	r24, 0x41	; 65
 104:	0e 94 b8 00 	call	0x170	; 0x170 <LED_off>
			LED_off(LED3_PORT,LED3_PIN);			
 108:	63 e0       	ldi	r22, 0x03	; 3
 10a:	81 e4       	ldi	r24, 0x41	; 65
 10c:	0e 94 b8 00 	call	0x170	; 0x170 <LED_off>
			break;
 110:	e5 cf       	rjmp	.-54     	; 0xdc <APP_start>
			case 1:
			LED_on(LED0_PORT,LED0_PIN);
 112:	60 e0       	ldi	r22, 0x00	; 0
 114:	81 e4       	ldi	r24, 0x41	; 65
 116:	0e 94 b4 00 	call	0x168	; 0x168 <LED_on>
			break;
 11a:	e0 cf       	rjmp	.-64     	; 0xdc <APP_start>
			case 2:
			LED_on(LED1_PORT,LED1_PIN);
 11c:	61 e0       	ldi	r22, 0x01	; 1
 11e:	81 e4       	ldi	r24, 0x41	; 65
 120:	0e 94 b4 00 	call	0x168	; 0x168 <LED_on>
			break;
 124:	db cf       	rjmp	.-74     	; 0xdc <APP_start>
			case 3:
			LED_on(LED2_PORT,LED2_PIN);
 126:	62 e0       	ldi	r22, 0x02	; 2
 128:	81 e4       	ldi	r24, 0x41	; 65
 12a:	0e 94 b4 00 	call	0x168	; 0x168 <LED_on>
			break;
 12e:	d6 cf       	rjmp	.-84     	; 0xdc <APP_start>
			case 4:
			LED_on(LED3_PORT,LED3_PIN);
 130:	63 e0       	ldi	r22, 0x03	; 3
 132:	81 e4       	ldi	r24, 0x41	; 65
 134:	0e 94 b4 00 	call	0x168	; 0x168 <LED_on>
			break;
 138:	d1 cf       	rjmp	.-94     	; 0xdc <APP_start>
			case 5:
			LED_off(LED0_PORT,LED0_PIN);
 13a:	60 e0       	ldi	r22, 0x00	; 0
 13c:	81 e4       	ldi	r24, 0x41	; 65
 13e:	0e 94 b8 00 	call	0x170	; 0x170 <LED_off>
			break;
 142:	cc cf       	rjmp	.-104    	; 0xdc <APP_start>
			case 6:
			LED_off(LED1_PORT,LED1_PIN);
 144:	61 e0       	ldi	r22, 0x01	; 1
 146:	81 e4       	ldi	r24, 0x41	; 65
 148:	0e 94 b8 00 	call	0x170	; 0x170 <LED_off>
			break;
 14c:	c7 cf       	rjmp	.-114    	; 0xdc <APP_start>
			case 7:
			LED_off(LED2_PORT,LED2_PIN);
 14e:	62 e0       	ldi	r22, 0x02	; 2
 150:	81 e4       	ldi	r24, 0x41	; 65
 152:	0e 94 b8 00 	call	0x170	; 0x170 <LED_off>
			break;
 156:	c2 cf       	rjmp	.-124    	; 0xdc <APP_start>

00000158 <BUTTON_init>:
 * Created: 4/9/2023 9:10:35 AM
 *  Author: MOHAMED ABDELSALAM
 */ 
#include "button.h"
void BUTTON_init (uint8_t buttonport, uint8_t buttonpin){
	DIO_init(buttonport,buttonpin,IN);
 158:	40 e0       	ldi	r20, 0x00	; 0
 15a:	0e 94 c1 00 	call	0x182	; 0x182 <DIO_init>
 15e:	08 95       	ret

00000160 <LED_init>:
 *  Author: MOHAMED ABDELSALAM
 */ 
#include "led.h"

void LED_init (uint8_t port, uint8_t pin){
	DIO_init(port,pin,OUT);
 160:	41 e0       	ldi	r20, 0x01	; 1
 162:	0e 94 c1 00 	call	0x182	; 0x182 <DIO_init>
 166:	08 95       	ret

00000168 <LED_on>:
}
void LED_on (uint8_t port, uint8_t pin){
	DIO_write(port,pin,HIGH);
 168:	41 e0       	ldi	r20, 0x01	; 1
 16a:	0e 94 39 01 	call	0x272	; 0x272 <DIO_write>
 16e:	08 95       	ret

00000170 <LED_off>:
}
void LED_off (uint8_t port, uint8_t pin){
	DIO_write(port,pin,LOW);
 170:	40 e0       	ldi	r20, 0x00	; 0
 172:	0e 94 39 01 	call	0x272	; 0x272 <DIO_write>
 176:	08 95       	ret

00000178 <main>:
#include "APPLICATION/application.h"


int main(void)
{
	APP_init();
 178:	0e 94 51 00 	call	0xa2	; 0xa2 <APP_init>
    /* Replace with your application code */
    while (1) 
    {
		APP_start();
 17c:	0e 94 6e 00 	call	0xdc	; 0xdc <APP_start>
 180:	fd cf       	rjmp	.-6      	; 0x17c <main+0x4>

00000182 <DIO_init>:
 * Created: 4/8/2023 11:45:35 PM
 *  Author: MOHAMED ABDELSALAM
 */ 
#include "dio.h"
void DIO_init (uint8_t portNumber,uint8_t pinNumber,uint8_t direction){
	switch(portNumber)
 182:	82 34       	cpi	r24, 0x42	; 66
 184:	29 f1       	breq	.+74     	; 0x1d0 <DIO_init+0x4e>
 186:	18 f4       	brcc	.+6      	; 0x18e <DIO_init+0xc>
 188:	81 34       	cpi	r24, 0x41	; 65
 18a:	39 f0       	breq	.+14     	; 0x19a <DIO_init+0x18>
 18c:	08 95       	ret
 18e:	83 34       	cpi	r24, 0x43	; 67
 190:	d1 f1       	breq	.+116    	; 0x206 <DIO_init+0x84>
 192:	84 34       	cpi	r24, 0x44	; 68
 194:	09 f4       	brne	.+2      	; 0x198 <DIO_init+0x16>
 196:	52 c0       	rjmp	.+164    	; 0x23c <DIO_init+0xba>
 198:	08 95       	ret
	{
		case 'A':
		if (direction == OUT)
 19a:	41 30       	cpi	r20, 0x01	; 1
 19c:	59 f4       	brne	.+22     	; 0x1b4 <DIO_init+0x32>
		{
			DDRA |= (1<<pinNumber);    //set
 19e:	2a b3       	in	r18, 0x1a	; 26
 1a0:	81 e0       	ldi	r24, 0x01	; 1
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	02 c0       	rjmp	.+4      	; 0x1aa <DIO_init+0x28>
 1a6:	88 0f       	add	r24, r24
 1a8:	99 1f       	adc	r25, r25
 1aa:	6a 95       	dec	r22
 1ac:	e2 f7       	brpl	.-8      	; 0x1a6 <DIO_init+0x24>
 1ae:	82 2b       	or	r24, r18
 1b0:	8a bb       	out	0x1a, r24	; 26
 1b2:	08 95       	ret
		}
		else if (direction == IN)
 1b4:	41 11       	cpse	r20, r1
 1b6:	5c c0       	rjmp	.+184    	; 0x270 <DIO_init+0xee>
		{
			DDRA &= ~(1<<pinNumber);   //clear
 1b8:	2a b3       	in	r18, 0x1a	; 26
 1ba:	81 e0       	ldi	r24, 0x01	; 1
 1bc:	90 e0       	ldi	r25, 0x00	; 0
 1be:	02 c0       	rjmp	.+4      	; 0x1c4 <DIO_init+0x42>
 1c0:	88 0f       	add	r24, r24
 1c2:	99 1f       	adc	r25, r25
 1c4:	6a 95       	dec	r22
 1c6:	e2 f7       	brpl	.-8      	; 0x1c0 <DIO_init+0x3e>
 1c8:	80 95       	com	r24
 1ca:	82 23       	and	r24, r18
 1cc:	8a bb       	out	0x1a, r24	; 26
 1ce:	08 95       	ret
		}		
		break;
		case 'B':
		if (direction == OUT)
 1d0:	41 30       	cpi	r20, 0x01	; 1
 1d2:	59 f4       	brne	.+22     	; 0x1ea <DIO_init+0x68>
		{
			DDRB |= (1<<pinNumber);
 1d4:	27 b3       	in	r18, 0x17	; 23
 1d6:	81 e0       	ldi	r24, 0x01	; 1
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	02 c0       	rjmp	.+4      	; 0x1e0 <DIO_init+0x5e>
 1dc:	88 0f       	add	r24, r24
 1de:	99 1f       	adc	r25, r25
 1e0:	6a 95       	dec	r22
 1e2:	e2 f7       	brpl	.-8      	; 0x1dc <DIO_init+0x5a>
 1e4:	82 2b       	or	r24, r18
 1e6:	87 bb       	out	0x17, r24	; 23
 1e8:	08 95       	ret
		}
		else if (direction == IN)
 1ea:	41 11       	cpse	r20, r1
 1ec:	41 c0       	rjmp	.+130    	; 0x270 <DIO_init+0xee>
		{
			DDRB &= ~(1<<pinNumber);
 1ee:	27 b3       	in	r18, 0x17	; 23
 1f0:	81 e0       	ldi	r24, 0x01	; 1
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	02 c0       	rjmp	.+4      	; 0x1fa <DIO_init+0x78>
 1f6:	88 0f       	add	r24, r24
 1f8:	99 1f       	adc	r25, r25
 1fa:	6a 95       	dec	r22
 1fc:	e2 f7       	brpl	.-8      	; 0x1f6 <DIO_init+0x74>
 1fe:	80 95       	com	r24
 200:	82 23       	and	r24, r18
 202:	87 bb       	out	0x17, r24	; 23
 204:	08 95       	ret
		}
		break;
		case 'C':
			if (direction == OUT)
 206:	41 30       	cpi	r20, 0x01	; 1
 208:	59 f4       	brne	.+22     	; 0x220 <DIO_init+0x9e>
			{
				DDRC |= (1<<pinNumber);
 20a:	24 b3       	in	r18, 0x14	; 20
 20c:	81 e0       	ldi	r24, 0x01	; 1
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	02 c0       	rjmp	.+4      	; 0x216 <DIO_init+0x94>
 212:	88 0f       	add	r24, r24
 214:	99 1f       	adc	r25, r25
 216:	6a 95       	dec	r22
 218:	e2 f7       	brpl	.-8      	; 0x212 <DIO_init+0x90>
 21a:	82 2b       	or	r24, r18
 21c:	84 bb       	out	0x14, r24	; 20
 21e:	08 95       	ret
			}
			else if (direction == IN)
 220:	41 11       	cpse	r20, r1
 222:	26 c0       	rjmp	.+76     	; 0x270 <DIO_init+0xee>
			{
				DDRC &= ~(1<<pinNumber);
 224:	24 b3       	in	r18, 0x14	; 20
 226:	81 e0       	ldi	r24, 0x01	; 1
 228:	90 e0       	ldi	r25, 0x00	; 0
 22a:	02 c0       	rjmp	.+4      	; 0x230 <DIO_init+0xae>
 22c:	88 0f       	add	r24, r24
 22e:	99 1f       	adc	r25, r25
 230:	6a 95       	dec	r22
 232:	e2 f7       	brpl	.-8      	; 0x22c <DIO_init+0xaa>
 234:	80 95       	com	r24
 236:	82 23       	and	r24, r18
 238:	84 bb       	out	0x14, r24	; 20
 23a:	08 95       	ret
			}
		break;				
		case 'D':
			if (direction == OUT)
 23c:	41 30       	cpi	r20, 0x01	; 1
 23e:	59 f4       	brne	.+22     	; 0x256 <DIO_init+0xd4>
			{
				DDRD |= (1<<pinNumber);
 240:	21 b3       	in	r18, 0x11	; 17
 242:	81 e0       	ldi	r24, 0x01	; 1
 244:	90 e0       	ldi	r25, 0x00	; 0
 246:	02 c0       	rjmp	.+4      	; 0x24c <DIO_init+0xca>
 248:	88 0f       	add	r24, r24
 24a:	99 1f       	adc	r25, r25
 24c:	6a 95       	dec	r22
 24e:	e2 f7       	brpl	.-8      	; 0x248 <DIO_init+0xc6>
 250:	82 2b       	or	r24, r18
 252:	81 bb       	out	0x11, r24	; 17
 254:	08 95       	ret
			}
			else if (direction == IN)
 256:	41 11       	cpse	r20, r1
 258:	0b c0       	rjmp	.+22     	; 0x270 <DIO_init+0xee>
			{
				DDRD &= ~(1<<pinNumber);
 25a:	21 b3       	in	r18, 0x11	; 17
 25c:	81 e0       	ldi	r24, 0x01	; 1
 25e:	90 e0       	ldi	r25, 0x00	; 0
 260:	02 c0       	rjmp	.+4      	; 0x266 <DIO_init+0xe4>
 262:	88 0f       	add	r24, r24
 264:	99 1f       	adc	r25, r25
 266:	6a 95       	dec	r22
 268:	e2 f7       	brpl	.-8      	; 0x262 <DIO_init+0xe0>
 26a:	80 95       	com	r24
 26c:	82 23       	and	r24, r18
 26e:	81 bb       	out	0x11, r24	; 17
 270:	08 95       	ret

00000272 <DIO_write>:
		break;		
		}
	
}
void DIO_write (uint8_t portNumber,uint8_t pinNumber,uint8_t value){
	switch(portNumber)
 272:	82 34       	cpi	r24, 0x42	; 66
 274:	29 f1       	breq	.+74     	; 0x2c0 <DIO_write+0x4e>
 276:	18 f4       	brcc	.+6      	; 0x27e <DIO_write+0xc>
 278:	81 34       	cpi	r24, 0x41	; 65
 27a:	39 f0       	breq	.+14     	; 0x28a <DIO_write+0x18>
 27c:	08 95       	ret
 27e:	83 34       	cpi	r24, 0x43	; 67
 280:	d1 f1       	breq	.+116    	; 0x2f6 <DIO_write+0x84>
 282:	84 34       	cpi	r24, 0x44	; 68
 284:	09 f4       	brne	.+2      	; 0x288 <DIO_write+0x16>
 286:	52 c0       	rjmp	.+164    	; 0x32c <DIO_write+0xba>
 288:	08 95       	ret
	{
		case 'A':
			if (value == HIGH)
 28a:	41 30       	cpi	r20, 0x01	; 1
 28c:	59 f4       	brne	.+22     	; 0x2a4 <DIO_write+0x32>
			{
				PORTA |= (1<<pinNumber);
 28e:	2b b3       	in	r18, 0x1b	; 27
 290:	81 e0       	ldi	r24, 0x01	; 1
 292:	90 e0       	ldi	r25, 0x00	; 0
 294:	02 c0       	rjmp	.+4      	; 0x29a <DIO_write+0x28>
 296:	88 0f       	add	r24, r24
 298:	99 1f       	adc	r25, r25
 29a:	6a 95       	dec	r22
 29c:	e2 f7       	brpl	.-8      	; 0x296 <DIO_write+0x24>
 29e:	82 2b       	or	r24, r18
 2a0:	8b bb       	out	0x1b, r24	; 27
 2a2:	08 95       	ret
			}
			else if (value == LOW)
 2a4:	41 11       	cpse	r20, r1
 2a6:	5c c0       	rjmp	.+184    	; 0x360 <DIO_write+0xee>
			{
				PORTA &= ~(1<<pinNumber);
 2a8:	2b b3       	in	r18, 0x1b	; 27
 2aa:	81 e0       	ldi	r24, 0x01	; 1
 2ac:	90 e0       	ldi	r25, 0x00	; 0
 2ae:	02 c0       	rjmp	.+4      	; 0x2b4 <DIO_write+0x42>
 2b0:	88 0f       	add	r24, r24
 2b2:	99 1f       	adc	r25, r25
 2b4:	6a 95       	dec	r22
 2b6:	e2 f7       	brpl	.-8      	; 0x2b0 <DIO_write+0x3e>
 2b8:	80 95       	com	r24
 2ba:	82 23       	and	r24, r18
 2bc:	8b bb       	out	0x1b, r24	; 27
 2be:	08 95       	ret
			}
		break;
		case 'B':
			if (value == HIGH)
 2c0:	41 30       	cpi	r20, 0x01	; 1
 2c2:	59 f4       	brne	.+22     	; 0x2da <DIO_write+0x68>
			{
				PORTB |= (1<<pinNumber);
 2c4:	28 b3       	in	r18, 0x18	; 24
 2c6:	81 e0       	ldi	r24, 0x01	; 1
 2c8:	90 e0       	ldi	r25, 0x00	; 0
 2ca:	02 c0       	rjmp	.+4      	; 0x2d0 <DIO_write+0x5e>
 2cc:	88 0f       	add	r24, r24
 2ce:	99 1f       	adc	r25, r25
 2d0:	6a 95       	dec	r22
 2d2:	e2 f7       	brpl	.-8      	; 0x2cc <DIO_write+0x5a>
 2d4:	82 2b       	or	r24, r18
 2d6:	88 bb       	out	0x18, r24	; 24
 2d8:	08 95       	ret
			}
			else if (value == LOW)
 2da:	41 11       	cpse	r20, r1
 2dc:	41 c0       	rjmp	.+130    	; 0x360 <DIO_write+0xee>
			{
				PORTB &= ~(1<<pinNumber);
 2de:	28 b3       	in	r18, 0x18	; 24
 2e0:	81 e0       	ldi	r24, 0x01	; 1
 2e2:	90 e0       	ldi	r25, 0x00	; 0
 2e4:	02 c0       	rjmp	.+4      	; 0x2ea <DIO_write+0x78>
 2e6:	88 0f       	add	r24, r24
 2e8:	99 1f       	adc	r25, r25
 2ea:	6a 95       	dec	r22
 2ec:	e2 f7       	brpl	.-8      	; 0x2e6 <DIO_write+0x74>
 2ee:	80 95       	com	r24
 2f0:	82 23       	and	r24, r18
 2f2:	88 bb       	out	0x18, r24	; 24
 2f4:	08 95       	ret
			}
		break;
		case 'C':
			if (value == HIGH)
 2f6:	41 30       	cpi	r20, 0x01	; 1
 2f8:	59 f4       	brne	.+22     	; 0x310 <DIO_write+0x9e>
			{
				PORTC |= (1<<pinNumber);
 2fa:	25 b3       	in	r18, 0x15	; 21
 2fc:	81 e0       	ldi	r24, 0x01	; 1
 2fe:	90 e0       	ldi	r25, 0x00	; 0
 300:	02 c0       	rjmp	.+4      	; 0x306 <DIO_write+0x94>
 302:	88 0f       	add	r24, r24
 304:	99 1f       	adc	r25, r25
 306:	6a 95       	dec	r22
 308:	e2 f7       	brpl	.-8      	; 0x302 <DIO_write+0x90>
 30a:	82 2b       	or	r24, r18
 30c:	85 bb       	out	0x15, r24	; 21
 30e:	08 95       	ret
			}
			else if (value == LOW)
 310:	41 11       	cpse	r20, r1
 312:	26 c0       	rjmp	.+76     	; 0x360 <DIO_write+0xee>
			{
				PORTC &= ~(1<<pinNumber);
 314:	25 b3       	in	r18, 0x15	; 21
 316:	81 e0       	ldi	r24, 0x01	; 1
 318:	90 e0       	ldi	r25, 0x00	; 0
 31a:	02 c0       	rjmp	.+4      	; 0x320 <DIO_write+0xae>
 31c:	88 0f       	add	r24, r24
 31e:	99 1f       	adc	r25, r25
 320:	6a 95       	dec	r22
 322:	e2 f7       	brpl	.-8      	; 0x31c <DIO_write+0xaa>
 324:	80 95       	com	r24
 326:	82 23       	and	r24, r18
 328:	85 bb       	out	0x15, r24	; 21
 32a:	08 95       	ret
			}
		break;
		case 'D':
			if (value == HIGH)
 32c:	41 30       	cpi	r20, 0x01	; 1
 32e:	59 f4       	brne	.+22     	; 0x346 <DIO_write+0xd4>
			{
				PORTD |= (1<<pinNumber);
 330:	22 b3       	in	r18, 0x12	; 18
 332:	81 e0       	ldi	r24, 0x01	; 1
 334:	90 e0       	ldi	r25, 0x00	; 0
 336:	02 c0       	rjmp	.+4      	; 0x33c <DIO_write+0xca>
 338:	88 0f       	add	r24, r24
 33a:	99 1f       	adc	r25, r25
 33c:	6a 95       	dec	r22
 33e:	e2 f7       	brpl	.-8      	; 0x338 <DIO_write+0xc6>
 340:	82 2b       	or	r24, r18
 342:	82 bb       	out	0x12, r24	; 18
 344:	08 95       	ret
			}
			else if (value == LOW)
 346:	41 11       	cpse	r20, r1
 348:	0b c0       	rjmp	.+22     	; 0x360 <DIO_write+0xee>
			{
				PORTD &= ~(1<<pinNumber);
 34a:	22 b3       	in	r18, 0x12	; 18
 34c:	81 e0       	ldi	r24, 0x01	; 1
 34e:	90 e0       	ldi	r25, 0x00	; 0
 350:	02 c0       	rjmp	.+4      	; 0x356 <DIO_write+0xe4>
 352:	88 0f       	add	r24, r24
 354:	99 1f       	adc	r25, r25
 356:	6a 95       	dec	r22
 358:	e2 f7       	brpl	.-8      	; 0x352 <DIO_write+0xe0>
 35a:	80 95       	com	r24
 35c:	82 23       	and	r24, r18
 35e:	82 bb       	out	0x12, r24	; 18
 360:	08 95       	ret

00000362 <SIE>:
	}
	void Timer0_Comp_CALLBACK (void (*copyFuncptr) (void)){
		Callbackptr9 = copyFuncptr;
	}
	void Timer0_Ovf_CALLBACK (void (*copyFuncptr) (void)){
		Callbackptr10 = copyFuncptr;
 362:	8f b7       	in	r24, 0x3f	; 63
 364:	80 68       	ori	r24, 0x80	; 128
 366:	8f bf       	out	0x3f, r24	; 63
 368:	08 95       	ret

0000036a <INT_SENSE>:
 36a:	86 30       	cpi	r24, 0x06	; 6
 36c:	29 f0       	breq	.+10     	; 0x378 <INT_SENSE+0xe>
 36e:	87 30       	cpi	r24, 0x07	; 7
 370:	a9 f0       	breq	.+42     	; 0x39c <INT_SENSE+0x32>
 372:	85 30       	cpi	r24, 0x05	; 5
 374:	81 f5       	brne	.+96     	; 0x3d6 <INT_SENSE+0x6c>
 376:	24 c0       	rjmp	.+72     	; 0x3c0 <INT_SENSE+0x56>
 378:	62 30       	cpi	r22, 0x02	; 2
 37a:	39 f4       	brne	.+14     	; 0x38a <INT_SENSE+0x20>
 37c:	85 b7       	in	r24, 0x35	; 53
 37e:	82 60       	ori	r24, 0x02	; 2
 380:	85 bf       	out	0x35, r24	; 53
 382:	85 b7       	in	r24, 0x35	; 53
 384:	81 60       	ori	r24, 0x01	; 1
 386:	85 bf       	out	0x35, r24	; 53
 388:	08 95       	ret
 38a:	61 30       	cpi	r22, 0x01	; 1
 38c:	21 f5       	brne	.+72     	; 0x3d6 <INT_SENSE+0x6c>
 38e:	85 b7       	in	r24, 0x35	; 53
 390:	82 60       	ori	r24, 0x02	; 2
 392:	85 bf       	out	0x35, r24	; 53
 394:	85 b7       	in	r24, 0x35	; 53
 396:	8e 7f       	andi	r24, 0xFE	; 254
 398:	85 bf       	out	0x35, r24	; 53
 39a:	08 95       	ret
 39c:	62 30       	cpi	r22, 0x02	; 2
 39e:	39 f4       	brne	.+14     	; 0x3ae <INT_SENSE+0x44>
 3a0:	85 b7       	in	r24, 0x35	; 53
 3a2:	88 60       	ori	r24, 0x08	; 8
 3a4:	85 bf       	out	0x35, r24	; 53
 3a6:	85 b7       	in	r24, 0x35	; 53
 3a8:	84 60       	ori	r24, 0x04	; 4
 3aa:	85 bf       	out	0x35, r24	; 53
 3ac:	08 95       	ret
 3ae:	61 30       	cpi	r22, 0x01	; 1
 3b0:	91 f4       	brne	.+36     	; 0x3d6 <INT_SENSE+0x6c>
 3b2:	85 b7       	in	r24, 0x35	; 53
 3b4:	88 60       	ori	r24, 0x08	; 8
 3b6:	85 bf       	out	0x35, r24	; 53
 3b8:	85 b7       	in	r24, 0x35	; 53
 3ba:	8b 7f       	andi	r24, 0xFB	; 251
 3bc:	85 bf       	out	0x35, r24	; 53
 3be:	08 95       	ret
 3c0:	61 30       	cpi	r22, 0x01	; 1
 3c2:	21 f4       	brne	.+8      	; 0x3cc <INT_SENSE+0x62>
 3c4:	84 b7       	in	r24, 0x34	; 52
 3c6:	80 64       	ori	r24, 0x40	; 64
 3c8:	84 bf       	out	0x34, r24	; 52
 3ca:	08 95       	ret
 3cc:	61 11       	cpse	r22, r1
 3ce:	03 c0       	rjmp	.+6      	; 0x3d6 <INT_SENSE+0x6c>
 3d0:	84 b7       	in	r24, 0x34	; 52
 3d2:	8b 7f       	andi	r24, 0xFB	; 251
 3d4:	84 bf       	out	0x34, r24	; 52
 3d6:	08 95       	ret

000003d8 <EX_INT_Enable>:
 3d8:	86 30       	cpi	r24, 0x06	; 6
 3da:	39 f4       	brne	.+14     	; 0x3ea <EX_INT_Enable+0x12>
 3dc:	8b b7       	in	r24, 0x3b	; 59
 3de:	80 64       	ori	r24, 0x40	; 64
 3e0:	8b bf       	out	0x3b, r24	; 59
 3e2:	8a b7       	in	r24, 0x3a	; 58
 3e4:	80 64       	ori	r24, 0x40	; 64
 3e6:	8a bf       	out	0x3a, r24	; 58
 3e8:	08 95       	ret
 3ea:	87 30       	cpi	r24, 0x07	; 7
 3ec:	21 f4       	brne	.+8      	; 0x3f6 <EX_INT_Enable+0x1e>
 3ee:	8b b7       	in	r24, 0x3b	; 59
 3f0:	80 68       	ori	r24, 0x80	; 128
 3f2:	8b bf       	out	0x3b, r24	; 59
 3f4:	08 95       	ret
 3f6:	85 30       	cpi	r24, 0x05	; 5
 3f8:	19 f4       	brne	.+6      	; 0x400 <__EEPROM_REGION_LENGTH__>
 3fa:	8b b7       	in	r24, 0x3b	; 59
 3fc:	80 62       	ori	r24, 0x20	; 32
 3fe:	8b bf       	out	0x3b, r24	; 59
 400:	08 95       	ret

00000402 <EX_INT_init>:
 402:	cf 93       	push	r28
 404:	df 93       	push	r29
 406:	c8 2f       	mov	r28, r24
 408:	d6 2f       	mov	r29, r22
 40a:	0e 94 b1 01 	call	0x362	; 0x362 <SIE>
 40e:	6d 2f       	mov	r22, r29
 410:	8c 2f       	mov	r24, r28
 412:	0e 94 b5 01 	call	0x36a	; 0x36a <INT_SENSE>
 416:	8c 2f       	mov	r24, r28
 418:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <EX_INT_Enable>
 41c:	df 91       	pop	r29
 41e:	cf 91       	pop	r28
 420:	08 95       	ret

00000422 <EX_INT0_SET_CALLBACK>:
 422:	90 93 6a 00 	sts	0x006A, r25	; 0x80006a <Callbackptr0+0x1>
 426:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <Callbackptr0>
 42a:	08 95       	ret

0000042c <__vector_1>:
	}
	ISR (EXT_INT_0){
 42c:	1f 92       	push	r1
 42e:	0f 92       	push	r0
 430:	0f b6       	in	r0, 0x3f	; 63
 432:	0f 92       	push	r0
 434:	11 24       	eor	r1, r1
 436:	2f 93       	push	r18
 438:	3f 93       	push	r19
 43a:	4f 93       	push	r20
 43c:	5f 93       	push	r21
 43e:	6f 93       	push	r22
 440:	7f 93       	push	r23
 442:	8f 93       	push	r24
 444:	9f 93       	push	r25
 446:	af 93       	push	r26
 448:	bf 93       	push	r27
 44a:	ef 93       	push	r30
 44c:	ff 93       	push	r31
		if(Callbackptr0 == 0){
 44e:	e0 91 69 00 	lds	r30, 0x0069	; 0x800069 <Callbackptr0>
 452:	f0 91 6a 00 	lds	r31, 0x006A	; 0x80006a <Callbackptr0+0x1>
 456:	30 97       	sbiw	r30, 0x00	; 0
 458:	09 f0       	breq	.+2      	; 0x45c <__vector_1+0x30>
				
		}
		else{
			Callbackptr0();
 45a:	09 95       	icall
		}
	}
 45c:	ff 91       	pop	r31
 45e:	ef 91       	pop	r30
 460:	bf 91       	pop	r27
 462:	af 91       	pop	r26
 464:	9f 91       	pop	r25
 466:	8f 91       	pop	r24
 468:	7f 91       	pop	r23
 46a:	6f 91       	pop	r22
 46c:	5f 91       	pop	r21
 46e:	4f 91       	pop	r20
 470:	3f 91       	pop	r19
 472:	2f 91       	pop	r18
 474:	0f 90       	pop	r0
 476:	0f be       	out	0x3f, r0	; 63
 478:	0f 90       	pop	r0
 47a:	1f 90       	pop	r1
 47c:	18 95       	reti

0000047e <__vector_2>:
	ISR (EXT_INT_1){
 47e:	1f 92       	push	r1
 480:	0f 92       	push	r0
 482:	0f b6       	in	r0, 0x3f	; 63
 484:	0f 92       	push	r0
 486:	11 24       	eor	r1, r1
 488:	2f 93       	push	r18
 48a:	3f 93       	push	r19
 48c:	4f 93       	push	r20
 48e:	5f 93       	push	r21
 490:	6f 93       	push	r22
 492:	7f 93       	push	r23
 494:	8f 93       	push	r24
 496:	9f 93       	push	r25
 498:	af 93       	push	r26
 49a:	bf 93       	push	r27
 49c:	ef 93       	push	r30
 49e:	ff 93       	push	r31
		if(Callbackptr1 == 0){
 4a0:	e0 91 67 00 	lds	r30, 0x0067	; 0x800067 <Callbackptr1>
 4a4:	f0 91 68 00 	lds	r31, 0x0068	; 0x800068 <Callbackptr1+0x1>
 4a8:	30 97       	sbiw	r30, 0x00	; 0
 4aa:	09 f0       	breq	.+2      	; 0x4ae <__vector_2+0x30>
				
		}
		else{
			Callbackptr1();
 4ac:	09 95       	icall
		}
	}
 4ae:	ff 91       	pop	r31
 4b0:	ef 91       	pop	r30
 4b2:	bf 91       	pop	r27
 4b4:	af 91       	pop	r26
 4b6:	9f 91       	pop	r25
 4b8:	8f 91       	pop	r24
 4ba:	7f 91       	pop	r23
 4bc:	6f 91       	pop	r22
 4be:	5f 91       	pop	r21
 4c0:	4f 91       	pop	r20
 4c2:	3f 91       	pop	r19
 4c4:	2f 91       	pop	r18
 4c6:	0f 90       	pop	r0
 4c8:	0f be       	out	0x3f, r0	; 63
 4ca:	0f 90       	pop	r0
 4cc:	1f 90       	pop	r1
 4ce:	18 95       	reti

000004d0 <__vector_3>:
	ISR (EXT_INT_2){
 4d0:	1f 92       	push	r1
 4d2:	0f 92       	push	r0
 4d4:	0f b6       	in	r0, 0x3f	; 63
 4d6:	0f 92       	push	r0
 4d8:	11 24       	eor	r1, r1
 4da:	2f 93       	push	r18
 4dc:	3f 93       	push	r19
 4de:	4f 93       	push	r20
 4e0:	5f 93       	push	r21
 4e2:	6f 93       	push	r22
 4e4:	7f 93       	push	r23
 4e6:	8f 93       	push	r24
 4e8:	9f 93       	push	r25
 4ea:	af 93       	push	r26
 4ec:	bf 93       	push	r27
 4ee:	ef 93       	push	r30
 4f0:	ff 93       	push	r31
		if(Callbackptr2 == 0){
 4f2:	e0 91 65 00 	lds	r30, 0x0065	; 0x800065 <Callbackptr2>
 4f6:	f0 91 66 00 	lds	r31, 0x0066	; 0x800066 <Callbackptr2+0x1>
 4fa:	30 97       	sbiw	r30, 0x00	; 0
 4fc:	09 f0       	breq	.+2      	; 0x500 <__vector_3+0x30>
			
		}
		else{
			Callbackptr2();
 4fe:	09 95       	icall
		}
	}
 500:	ff 91       	pop	r31
 502:	ef 91       	pop	r30
 504:	bf 91       	pop	r27
 506:	af 91       	pop	r26
 508:	9f 91       	pop	r25
 50a:	8f 91       	pop	r24
 50c:	7f 91       	pop	r23
 50e:	6f 91       	pop	r22
 510:	5f 91       	pop	r21
 512:	4f 91       	pop	r20
 514:	3f 91       	pop	r19
 516:	2f 91       	pop	r18
 518:	0f 90       	pop	r0
 51a:	0f be       	out	0x3f, r0	; 63
 51c:	0f 90       	pop	r0
 51e:	1f 90       	pop	r1
 520:	18 95       	reti

00000522 <__vector_10>:
	ISR (TIMER0_COMP){
 522:	1f 92       	push	r1
 524:	0f 92       	push	r0
 526:	0f b6       	in	r0, 0x3f	; 63
 528:	0f 92       	push	r0
 52a:	11 24       	eor	r1, r1
 52c:	2f 93       	push	r18
 52e:	3f 93       	push	r19
 530:	4f 93       	push	r20
 532:	5f 93       	push	r21
 534:	6f 93       	push	r22
 536:	7f 93       	push	r23
 538:	8f 93       	push	r24
 53a:	9f 93       	push	r25
 53c:	af 93       	push	r26
 53e:	bf 93       	push	r27
 540:	ef 93       	push	r30
 542:	ff 93       	push	r31
		if(Callbackptr9 == 0){
 544:	e0 91 63 00 	lds	r30, 0x0063	; 0x800063 <Callbackptr9>
 548:	f0 91 64 00 	lds	r31, 0x0064	; 0x800064 <Callbackptr9+0x1>
 54c:	30 97       	sbiw	r30, 0x00	; 0
 54e:	09 f0       	breq	.+2      	; 0x552 <__vector_10+0x30>
			
		}
		else{
			Callbackptr9();
 550:	09 95       	icall
		}
	}
 552:	ff 91       	pop	r31
 554:	ef 91       	pop	r30
 556:	bf 91       	pop	r27
 558:	af 91       	pop	r26
 55a:	9f 91       	pop	r25
 55c:	8f 91       	pop	r24
 55e:	7f 91       	pop	r23
 560:	6f 91       	pop	r22
 562:	5f 91       	pop	r21
 564:	4f 91       	pop	r20
 566:	3f 91       	pop	r19
 568:	2f 91       	pop	r18
 56a:	0f 90       	pop	r0
 56c:	0f be       	out	0x3f, r0	; 63
 56e:	0f 90       	pop	r0
 570:	1f 90       	pop	r1
 572:	18 95       	reti

00000574 <__vector_11>:
	ISR (TIMER0_OVF){
 574:	1f 92       	push	r1
 576:	0f 92       	push	r0
 578:	0f b6       	in	r0, 0x3f	; 63
 57a:	0f 92       	push	r0
 57c:	11 24       	eor	r1, r1
 57e:	2f 93       	push	r18
 580:	3f 93       	push	r19
 582:	4f 93       	push	r20
 584:	5f 93       	push	r21
 586:	6f 93       	push	r22
 588:	7f 93       	push	r23
 58a:	8f 93       	push	r24
 58c:	9f 93       	push	r25
 58e:	af 93       	push	r26
 590:	bf 93       	push	r27
 592:	ef 93       	push	r30
 594:	ff 93       	push	r31
		if(Callbackptr10 == 0){
 596:	e0 91 61 00 	lds	r30, 0x0061	; 0x800061 <Callbackptr10>
 59a:	f0 91 62 00 	lds	r31, 0x0062	; 0x800062 <Callbackptr10+0x1>
 59e:	30 97       	sbiw	r30, 0x00	; 0
 5a0:	09 f0       	breq	.+2      	; 0x5a4 <__vector_11+0x30>
		}
		else{
			Callbackptr10();
 5a2:	09 95       	icall
		}
	}
 5a4:	ff 91       	pop	r31
 5a6:	ef 91       	pop	r30
 5a8:	bf 91       	pop	r27
 5aa:	af 91       	pop	r26
 5ac:	9f 91       	pop	r25
 5ae:	8f 91       	pop	r24
 5b0:	7f 91       	pop	r23
 5b2:	6f 91       	pop	r22
 5b4:	5f 91       	pop	r21
 5b6:	4f 91       	pop	r20
 5b8:	3f 91       	pop	r19
 5ba:	2f 91       	pop	r18
 5bc:	0f 90       	pop	r0
 5be:	0f be       	out	0x3f, r0	; 63
 5c0:	0f 90       	pop	r0
 5c2:	1f 90       	pop	r1
 5c4:	18 95       	reti

000005c6 <__tablejump2__>:
 5c6:	ee 0f       	add	r30, r30
 5c8:	ff 1f       	adc	r31, r31
 5ca:	05 90       	lpm	r0, Z+
 5cc:	f4 91       	lpm	r31, Z
 5ce:	e0 2d       	mov	r30, r0
 5d0:	09 94       	ijmp

000005d2 <_exit>:
 5d2:	f8 94       	cli

000005d4 <__stop_program>:
 5d4:	ff cf       	rjmp	.-2      	; 0x5d4 <__stop_program>
